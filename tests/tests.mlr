:quiet

:assert [a] == [a]
:assert NOT [a] == [b]
:assert NOT 1 >> a
:assert NOT a >> 1
:assert NOT a >> b
:assert (# 0*) == 1
:assert (# a**) == (# a*)
:assert (aaa)*aa == a(aaa)*a
:assert (aaa)*aa == aa(aaa)*
:assert (a+b)* == (a*b)*a*


:verbose
R1 := (# <RANDOM>)
D1 := [ R1 ]
N1 := { R1 }
R2 := < D1 >
D2 := [ N1 ]
N2 := { R2 }

:assert R1 == D1
:assert R1 == N1
:assert N1 == D1
:assert N2 == N1
:assert D2 == R2
:assert N2 == D2
:assert R2 == R1

R3 := (# <RANDOM>)
R4 := < ~ [ < ~ [R3] / {a,b,c,d,e} > ] / {a,b,c,d,e} >
:assert R3 == R4


R5 := (# <RANDOM10>)
N5 := {D R5}
N6 := {I R5}
:assert N5 == N6

:quit
